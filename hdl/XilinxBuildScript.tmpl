#!/bin/bash
set -eu -o pipefail

WORK=`dirname {{ .Out }}`

cat > {{ .Out }} <<EOF
{{range .BoardFiles}}
set_param board.repoPaths [lappend board.repoPaths "{{ . }}"]
{{end}}

set_part "{{ .PartName }}"
set_property "board_part"         "{{ .BoardName}}"       [current_project]
set_property "target_language"    "Verilog"        [current_project]

proc generate_reports {report_dir} {
	# Timing
	report_timing -from [all_registers -output_pins] -to [all_registers -data_pins] -max_paths 50 > \$report_dir/datapath_tss.rpt
	report_timing -from [all_inputs] -to [all_registers -data_pins] -max_paths 50 > \$report_dir/datapath_tis.rpt
	report_timing -from [all_registers -output_pins] -to [all_outputs] -max_paths 50 > \$report_dir/datapath_tso.rpt
	report_timing -from [all_inputs] -to [all_outputs] -max_paths 50 > \$report_dir/datapath_tio.rpt
	report_timing_summary > \$report_dir/timing_summary.rpt

	# Design analysis
	report_design_analysis -extend -setup -congestion -complexity -timing -file \$report_dir/design_analysis.rpt
	report_pipeline_analysis -file \$report_dir/pipeline_analysis.rpt

	# Utilization
	report_utilization -hierarchical_depth 4 -hierarchical > \$report_dir/util_hierarchical.rpt
	report_utilization > \$report_dir/util_summary.rpt
}



{{ range .Ips }}
set path "{{ . }}"
set normalized [file normalize [string range \$path 1 [string length \$path]]]
set dir [file join [pwd] [file dirname \$normalized]]
set filename [file tail \$normalized]
file mkdir \$dir
file copy "{{ . }}" \$dir
set ip [file join \$dir \$filename]
read_ip \$ip
generate_target all [get_files \$ip]
set_property GENERATE_SYNTH_CHECKPOINT true [get_files \$ip]
synth_ip [get_files \$ip]
{{ end }}

report_ip_status

{{ range .Rtls }}
    {{ if hasSuffix .String ".vhd" }}
        read_vhdl "{{ . }}"
    {{ else }}
        read_verilog -sv "{{ . }}"
    {{ end }}
{{ end }}

{{ range .Constrs }}
read_xdc "{{ . }}"
{{ end }}

synth_design -top {{ .Name }} -include_dirs {{ .IncDir }} -flatten_hierarchy rebuilt > $WORK/synth.log
exec mkdir -p $WORK/post_synth
write_checkpoint -force $WORK/post_synth/checkpoint
generate_reports $WORK/post_synth

opt_design > $WORK/opt.log
exec mkdir -p $WORK/post_opt
write_checkpoint -force $WORK/post_opt/checkpoint
generate_reports $WORK/post_opt

place_design > $WORK/place.log
exec mkdir -p $WORK/post_place
write_checkpoint -force $WORK/post_place/checkpoint
generate_reports $WORK/post_place

phys_opt_design > $WORK/phys_opt.log
exec mkdir -p $WORK/post_phys_opt
write_checkpoint -force $WORK/post_phys_opt/checkpoint
generate_reports $WORK/post_phys_opt

route_design > $WORK/route.log
exec mkdir -p $WORK/post_route
write_checkpoint -force $WORK/post_route/checkpoint
generate_reports $WORK/post_route

write_bitstream -force bitstream.bit
write_debug_probes -force bitstream.ltx
EOF
