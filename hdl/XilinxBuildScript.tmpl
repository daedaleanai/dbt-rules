#!/bin/bash
set -eu -o pipefail

{{ $outOfContext := .OutOfContext }}

cat > {{ .Out }} <<EOF
{{range .BoardFiles}}
set_param board.repoPaths [lappend board.repoPaths "{{ . }}"]
{{end}}

set_part "{{ .PartName }}"
set_property "target_language"    "Verilog"        [current_project]

{{ if not .OutOfContext }}
	set_property "board_part"         "{{ .BoardName}}"       [current_project]
{{ end }}

proc generate_reports {report_dir} {
	# Timing
	report_timing -from [all_registers -output_pins] -to [all_registers -data_pins] -max_paths 50 > \$report_dir/datapath_tss.rpt
	report_timing -from [all_inputs] -to [all_registers -data_pins] -max_paths 50 > \$report_dir/datapath_tis.rpt
	report_timing -from [all_registers -output_pins] -to [all_outputs] -max_paths 50 > \$report_dir/datapath_tso.rpt
	report_timing -from [all_inputs] -to [all_outputs] -max_paths 50 > \$report_dir/datapath_tio.rpt
	report_timing_summary > \$report_dir/timing_summary.rpt

	# Design analysis
	report_design_analysis -extend -setup -congestion -complexity -timing -file \$report_dir/design_analysis.rpt
	report_pipeline_analysis -file \$report_dir/pipeline_analysis.rpt

	# Utilization
	report_utilization -hierarchical_depth 4 -hierarchical > \$report_dir/util_hierarchical.rpt
	report_utilization > \$report_dir/util_summary.rpt
}

# Set Results folder

set OUT_CHECKPOINTS "{{ .ReportDir }}/checkpoints"

exec mkdir -p {{ .ReportDir }}
exec mkdir -p \$OUT_CHECKPOINTS

{{ range .Ips }}
set path "{{ . }}"
set normalized [file normalize [string range \$path 1 [string length \$path]]]
set dir [file join [pwd] [file dirname \$normalized]]
set filename [file tail \$normalized]
file mkdir \$dir
file copy "{{ . }}" \$dir
set ip [file join \$dir \$filename]
read_ip \$ip
generate_target all [get_files \$ip]
set_property GENERATE_SYNTH_CHECKPOINT true [get_files \$ip]
synth_ip [get_files \$ip]
{{ end }}

report_ip_status

{{ range .Rtls }}
    {{ if hasSuffix .String ".vhd" }}
        read_vhdl "{{ . }}"
    {{ else }}
        read_verilog -sv "{{ . }}"
    {{ end }}
{{ end }}

{{ range .Constrs }}
	read_xdc {{ if $outOfContext }} -mode out_of_context {{ end }} "{{ . }}"
{{ end }}

synth_design -top {{ .Name }} -include_dirs {{ .IncDir }} {{ if .OutOfContext }} -mode out_of_context {{ end }} -flatten_hierarchy rebuilt > {{ .ReportDir }}/synth.log
write_checkpoint -force \$OUT_CHECKPOINTS/post_synth
exec mkdir -p {{ .ReportDir }}/post_synth
generate_reports {{ .ReportDir }}/post_synth

opt_design > {{ .ReportDir }}/opt.log
write_checkpoint -force \$OUT_CHECKPOINTS/post_opt
exec mkdir -p {{ .ReportDir }}/post_opt
generate_reports {{ .ReportDir }}/post_opt

place_design > {{ .ReportDir }}/place.log
write_checkpoint -force \$OUT_CHECKPOINTS/post_place
exec mkdir -p {{ .ReportDir }}/post_place
generate_reports {{ .ReportDir }}/post_place

phys_opt_design > {{ .ReportDir }}/phys_opt.log
write_checkpoint -force \$OUT_CHECKPOINTS/post_phys_opt
exec mkdir -p {{ .ReportDir }}/post_phys_opt
generate_reports {{ .ReportDir }}/post_phys_opt

route_design > {{ .ReportDir }}/route.log
write_checkpoint -force \$OUT_CHECKPOINTS/post_route
exec mkdir -p {{ .ReportDir }}/post_route
generate_reports {{ .ReportDir }}/post_route

{{ if not .OutOfContext }}
	write_bitstream -force bitstream.bit
	write_debug_probes -force bitstream.ltx
{{ end }}
EOF
